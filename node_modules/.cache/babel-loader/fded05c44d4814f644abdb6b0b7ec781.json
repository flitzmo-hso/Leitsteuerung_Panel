{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/ProgressTime.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function KpiAuslastung() {\n  _s();\n\n  const [time, setTime] = useState(\"\");\n  const [anzFinish, setAnzFinish] = useState(\"\");\n  const [avgTime, setAvgTime] = useState(\"\");\n  useEffect(() => {\n    getProgessTime();\n  }); //Get KPI\n\n  function getProgessTime() {\n    axios.get('http://localhost:8080/getProgressTime').then(res => {\n      console.log(\"Progresstime:\", res);\n\n      if (res.data.length === 0) {\n        //Check if data is availabl\n        setTime(0);\n        setAnzFinish(0);\n        setAvgTime(0);\n        return;\n      }\n\n      if (DataAreEqual(res.data)) return; //Check if old data = new data\n\n      setTime(res.data[0]);\n      setAnzFinish(res.data[0]);\n      setAvgTime(res.data[0]);\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(newData) {\n    if (newData.sort().join(',') === data.sort().join(',')) {\n      return true;\n    } else return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '78px',\n      width: '90px',\n      padding: 0,\n      margin: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(KpiAuslastung, \"AUjUKBVJ3CRpzgeDaVS/7gtLd/Y=\");\n\n_c = KpiAuslastung;\n\nvar _c;\n\n$RefreshReg$(_c, \"KpiAuslastung\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/ProgressTime.js"],"names":["React","useState","useEffect","ChartDonut","ChartThemeColor","axios","KpiAuslastung","time","setTime","anzFinish","setAnzFinish","avgTime","setAvgTime","getProgessTime","get","then","res","console","log","data","length","DataAreEqual","catch","err","message","newData","sort","join","height","width","padding","margin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA2C,0BAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAExC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAEW,IAAAA,cAAc;AAAK,GAA5B,CAAT,CANwC,CAQxC;;AACA,WAASA,cAAT,GACA;AACER,IAAAA,KAAK,CAACS,GAAN,CAAU,uCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B;;AACF,UAAGA,GAAG,CAACG,IAAJ,CAASC,MAAT,KAAoB,CAAvB,EAA0B;AAAE;AAC1BZ,QAAAA,OAAO,CAAC,CAAD,CAAP;AACAE,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,QAAAA,UAAU,CAAC,CAAD,CAAV;AACA;AACD;;AAGD,UAAIS,YAAY,CAACL,GAAG,CAACG,IAAL,CAAhB,EAA4B,OAVf,CAUwB;;AACrCX,MAAAA,OAAO,CAACQ,GAAG,CAACG,IAAJ,CAAS,CAAT,CAAD,CAAP;AACAT,MAAAA,YAAY,CAACM,GAAG,CAACG,IAAJ,CAAS,CAAT,CAAD,CAAZ;AACAP,MAAAA,UAAU,CAACI,GAAG,CAACG,IAAJ,CAAS,CAAT,CAAD,CAAV;AAEC,KAhBL,EAkBKG,KAlBL,CAkBWC,GAAG,IAAI;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACC,OAAhB,EADU,CACgB;AAC7B,KApBL;AAqBC,GAhCqC,CAkCpC;;;AACA,WAASH,YAAT,CAAsBI,OAAtB,EAA8B;AAC1B,QAAGA,OAAO,CAACC,IAAR,GAAeC,IAAf,CAAoB,GAApB,MAA6BR,IAAI,CAACO,IAAL,GAAYC,IAAZ,CAAiB,GAAjB,CAAhC,EAAsD;AAClD,aAAO,IAAP;AACH,KAFD,MAGK,OAAO,KAAP;AACR;;AAGH,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,OAAO,EAAE,CAA1C;AAA6CC,MAAAA,MAAM,EAAE;AAArD,KAAZ;AAAA,2BAEA;AAAA,sBAAMxB,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAjDuBD,a;;KAAAA,a","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { ChartDonut, ChartThemeColor} from '@patternfly/react-charts';\nimport axios from \"axios\";\n\nexport default function KpiAuslastung() {\n\nconst [time, setTime] = useState(\"\");     \nconst [anzFinish, setAnzFinish] = useState(\"\");   \nconst [avgTime, setAvgTime] = useState(\"\");  \n\nuseEffect(() => { getProgessTime(); });\n\n//Get KPI\nfunction getProgessTime()\n{ \n  axios.get('http://localhost:8080/getProgressTime')\n      .then(res => {\n        console.log(\"Progresstime:\", res)\n      if(res.data.length === 0) { //Check if data is availabl\n        setTime(0)\n        setAnzFinish(0)\n        setAvgTime(0)\n        return;\n      }       \n    \n      \n      if (DataAreEqual(res.data)) return;  //Check if old data = new data\n      setTime(res.data[0])\n      setAnzFinish(res.data[0])\n      setAvgTime(res.data[0])\n\n      })\n\n      .catch(err => {\n          console.log(err.message); //Error-Handling\n      })\n  } \n\n    //Check if old data = new data\n    function DataAreEqual(newData){\n        if(newData.sort().join(',') === data.sort().join(',')){\n            return true;\n        }\n        else return false;\n    }\n\n\n  return (\n    <div style={{ height: '78px', width: '90px', padding: 0, margin: 0}}>  \n\n    <p> { time }</p>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}