{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TabChange from './Orders/TabChange.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Orders() {\n  _s();\n\n  const [allData, setAllData] = useState([]);\n  useEffect(() => {\n    getTaskStates();\n    const interval = setInterval(() => {\n      getTaskStates();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function getTaskStates() {\n    console.log(\"Loop\");\n    axios.get('http://0.0.0.0:8080/task_list').then(res => {\n      console.log(\"Taskstatus:\", res.data); //Data from Gateway\n\n      if (res.data.length === 0) {\n        //Check if data is available\n        //Karten auf null setzen\n        return;\n      }\n\n      if (DataAreEqual(allData, res.data)) return;\n      setAllData(res.data);\n      console.log(allData);\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(data, sortedOrders) {\n    if (data.sort().join(',') === sortedOrders.sort().join(',')) {\n      return true;\n    } else return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TabChange, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Orders, \"wvSF2ckxQjUNASfZMrdtN9Q7fbY=\");\n\n_c = Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders.js"],"names":["React","useState","useEffect","TabChange","Orders","allData","setAllData","getTaskStates","interval","setInterval","clearInterval","console","log","axios","get","then","res","data","length","DataAreEqual","catch","err","message","sortedOrders","sort","join"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,uBAAtB;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAEjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,aAAa;AACb,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAAEF,MAAAA,aAAa;AAAI,KAA1B,EAA4B,IAA5B,CAA5B;AACA,WAAO,MAAKG,aAAa,CAACF,QAAD,CAAzB;AACD,GAJM,EAIJ,EAJI,CAAT;;AAOA,WAASD,aAAT,GAAwB;AACpBI,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEAC,IAAAA,KAAK,CAACC,GAAN,CAAU,+BAAV,EACCC,IADD,CACMC,GAAG,IAAI;AACbL,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BI,GAAG,CAACC,IAA/B,EADa,CACyB;;AAEtC,UAAGD,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAvB,EAA0B;AAAE;AAC1B;AACA;AACD;;AAED,UAAIC,YAAY,CAACd,OAAD,EAAUW,GAAG,CAACC,IAAd,CAAhB,EAAqC;AAErCX,MAAAA,UAAU,CAACU,GAAG,CAACC,IAAL,CAAV;AAEAN,MAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAEH,KAfG,EAgBHe,KAhBG,CAgBGC,GAAG,IAAI;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACC,OAAhB,EADU,CACgB;AAC7B,KAlBG;AAoBH,GAnCgC,CAsC/B;;;AACA,WAASH,YAAT,CAAsBF,IAAtB,EAA4BM,YAA5B,EAAyC;AACvC,QAAGN,IAAI,CAACO,IAAL,GAAYC,IAAZ,CAAiB,GAAjB,MAA0BF,YAAY,CAACC,IAAb,GAAoBC,IAApB,CAAyB,GAAzB,CAA7B,EAA2D;AACzD,aAAO,IAAP;AACC,KAFH,MAGO,OAAO,KAAP;AACN;;AAED,sBACI;AAAA,2BACC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GArDuBrB,M;;KAAAA,M","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport TabChange from './Orders/TabChange.js';\n\nexport default function Orders() {\n\nconst [allData, setAllData] = useState([]); \n\n\nuseEffect(() => {\n    getTaskStates()\n    const interval = setInterval(() => { getTaskStates() }, 2000)\n    return ()=> clearInterval(interval)\n  }, []);\n  \n\nfunction getTaskStates(){\n    console.log(\"Loop\");\n\n    axios.get('http://0.0.0.0:8080/task_list')\n    .then(res => {\n    console.log(\"Taskstatus:\", res.data); //Data from Gateway\n\n    if(res.data.length === 0) { //Check if data is available\n      //Karten auf null setzen\n      return;\n    }\n\n    if (DataAreEqual(allData, res.data)) return; \n\n    setAllData(res.data)\n\n    console.log(allData)\n    \n})\n.catch(err => {\n    console.log(err.message); //Error-Handling\n})\n\n}\n\n\n  //Check if old data = new data\n  function DataAreEqual(data, sortedOrders){\n    if(data.sort().join(',') === sortedOrders.sort().join(',')){\n      return true;\n      }\n      else return false;\n    }\n\n    return (\n        <div >\n         <TabChange/>\n        </div>\n    );\n\n\n}\n"]},"metadata":{},"sourceType":"module"}