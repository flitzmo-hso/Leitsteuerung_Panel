{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TabChange from './Orders/TabChange.js';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Orders() {\n  _s();\n\n  const [allData, setAllData] = useState([]);\n  const [sessionId, setSessionId] = useState(\"\");\n  getSessionId(); //Set sessionID once by initializing\n\n  useEffect(() => {\n    getTaskStates();\n    const interval = setInterval(() => {\n      getTaskStates();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function getTaskStates() {\n    axios.get('http://0.0.0.0:8080/task_list').then(res => {\n      console.log(\"Tasks:\", res.data); //Data from Gateway\n\n      if (res.data.length === 0) {\n        //Check if data is available\n        return;\n      }\n\n      var newData = [];\n      res.data.forEach(element => {\n        //Convert response to right format\n        newData.push(element);\n      });\n      if (DataAreEqual(allData, newData)) return; //Check if data has changed   \n\n      updateStatusOfNewOrders(allData, newData); //Update Status of new orders\n\n      setAllData(newData); //Set new Data\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  }\n\n  function updateStatusOfNewOrders(oldData, newData) {\n    console.log(\"SessionId:\", sessionId); //TODO : Hier in Zukunft nur die neuen Änderungen. Dazu OldData mit NewData vergleichen.\n    //Aktuell werden noch alle genommen.\n\n    newData.forEach(element => {\n      var statusNr;\n      if (element['state'] === \"NOT USED HERE\") statusNr = 1; //open\n      else if (element['state'] === \"Active/Executing\") statusNr = 2; //in progress\n        else if (element['state'] === \"Completed\") statusNr = 3; // Finished\n          else if (element['state'] === \"Active/Cancelled\") statusNr = 4; //canceled\n            else if (element['state'] === \"Queued\") statusNr = 5; //waiting\n\n      /*axios.put('http://0.0.0.0:8080/updateOrderStatus?status='+statusNr, \"FORMATEDOBJ BZW NUR NUMMER?\")\n      .then(res => {\n        if(res.data === undefined || res.data.length === 0)  return;\n      console.log(\"Returned Task ID:\", res.data['task_id']);\n           var taskId = res.data['task_id']\n         \n      })\n      .catch(err => {\n          console.log(err.message); //Error-Handling\n          alert(\"Fehler beim Auftrag übermitteln.\");  \n             })  */\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(inputData, sortedOrders) {\n    if (inputData.sort().join(',') === sortedOrders.sort().join(',')) {\n      return true;\n    } else return false;\n  }\n\n  function getSessionId() {\n    axios.get('http://0.0.0.0:8080/getSessionId').then(res => {\n      console.log(\"SessionId:\", res.data); //Data from Gateway\n\n      if (res.data.length === 0) {\n        //Check if data is available\n        return;\n      }\n\n      setSessionId(String(res.data));\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TabChange, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Orders, \"DfQzIGqgGc2n85vKLnAusl8URWc=\");\n\n_c = Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders.js"],"names":["React","useState","useEffect","TabChange","axios","Orders","allData","setAllData","sessionId","setSessionId","getSessionId","getTaskStates","interval","setInterval","clearInterval","get","then","res","console","log","data","length","newData","forEach","element","push","DataAreEqual","updateStatusOfNewOrders","catch","err","message","oldData","statusNr","inputData","sortedOrders","sort","join","String"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport TabChange from './Orders/TabChange.js';\nimport axios from \"axios\";\n \n\nexport default function Orders() {\n\nconst [allData, setAllData] = useState([]);\nconst [sessionId, setSessionId] = useState(\"\");\n\ngetSessionId(); //Set sessionID once by initializing\n\n\nuseEffect(() => {\n    getTaskStates()\n    const interval = setInterval(() => { getTaskStates() }, 2000)\n    return ()=> clearInterval(interval)\n  }, []);\n  \n\nfunction getTaskStates(){\n\n    axios.get('http://0.0.0.0:8080/task_list')\n    .then(res => {\n    console.log(\"Tasks:\", res.data); //Data from Gateway\n\n    if(res.data.length === 0) { //Check if data is available\n     \n      return;\n    }\n\n    var newData = [];\n\n    res.data.forEach(element => { //Convert response to right format\n        newData.push(element)\n    });\n\n    if (DataAreEqual(allData, newData)) return; //Check if data has changed   \n\n    updateStatusOfNewOrders(allData, newData); //Update Status of new orders\n\n    setAllData(newData); //Set new Data\n\n\n    })\n    .catch(err => {\n        console.log(err.message); //Error-Handling\n    })\n\n}\n\n\n  function updateStatusOfNewOrders(oldData, newData){  \n\n    console.log(\"SessionId:\", sessionId);\n\n    //TODO : Hier in Zukunft nur die neuen Änderungen. Dazu OldData mit NewData vergleichen.\n    //Aktuell werden noch alle genommen.\n\n    newData.forEach(element => {\n\n        var statusNr;\n\n        if(element['state'] === \"NOT USED HERE\") statusNr = 1; //open\n        else if(element['state'] === \"Active/Executing\") statusNr = 2; //in progress\n        else if(element['state'] === \"Completed\") statusNr = 3; // Finished\n        else if(element['state'] === \"Active/Cancelled\") statusNr = 4; //canceled\n        else if(element['state'] === \"Queued\") statusNr = 5; //waiting\n\n\n        /*axios.put('http://0.0.0.0:8080/updateOrderStatus?status='+statusNr, \"FORMATEDOBJ BZW NUR NUMMER?\")\n        .then(res => {\n          if(res.data === undefined || res.data.length === 0)  return;\n        console.log(\"Returned Task ID:\", res.data['task_id']);\n    \n        var taskId = res.data['task_id']\n    \n      \n        })\n        .catch(err => {\n            console.log(err.message); //Error-Handling\n            alert(\"Fehler beim Auftrag übermitteln.\");  \n      \n        })  */\n        \n    });\n\n  }\n\n\n  //Check if old data = new data\n  function DataAreEqual(inputData, sortedOrders){\n    if(inputData.sort().join(',') === sortedOrders.sort().join(',')){\n      return true;\n      }\n      else return false;\n   }\n\n\n   function getSessionId(){\n\n    axios.get('http://0.0.0.0:8080/getSessionId')\n    .then(res => {\n    console.log(\"SessionId:\", res.data); //Data from Gateway\n\n    if(res.data.length === 0) { //Check if data is available\n     \n      return;\n    }\n    \n    setSessionId(String(res.data));\n\n    })\n    .catch(err => {\n        console.log(err.message); //Error-Handling\n    })\n\n    }\n\n\n\n    return (\n        <div >\n         <TabChange/>\n        </div>\n    );\n\n}\n"]},"metadata":{},"sourceType":"module"}