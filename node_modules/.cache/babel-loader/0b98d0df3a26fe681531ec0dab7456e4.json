{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders/Roboterstatus.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport axios from \"axios\";\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Grid from \"@material-ui/core/Grid\";\nimport AndroidIcon from '@material-ui/icons/Android';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  avatar: {\n    backgroundColor: red[500]\n  }\n}));\nexport default function Roboterstatus() {\n  _s();\n\n  const [allData, setAllData] = useState([]);\n  const [cardData, setCardData] = useState([]);\n  useEffect(() => {\n    getRobotsStates();\n  });\n\n  function getRobotsStates() {\n    axios.get('http://0.0.0.0:8080/robot_list').then(res => {\n      console.log(\"Robotstates:\", res.data); //Data from Gateway\n\n      if (res.data.length === 0) {\n        //Check if data is available\n        //Karten auf null setzen\n        return;\n      }\n\n      if (DataAreEqual(res.data)) return;\n      setAllData(res.data); //Set new table data\n\n      setCardData(res.data);\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(newData) {\n    if (newData.sort().join(',') === allData.sort().join(',')) {\n      return true;\n    } else return false;\n  }\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      children: cardData.map(elem => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            border: \"2px solid grey\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              \"aria-label\": \"recipe\",\n              className: classes.avatar,\n              style: {\n                backgroundColor: \"green\"\n              },\n              children: /*#__PURE__*/_jsxDEV(AndroidIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n            /*action={\n              <IconButton aria-label=\"settings\">\n                <ClearIcon />\n              </IconButton>\n            }*/\n            ,\n            title: `Robotername: ${elem['robot_name']}`,\n            subheader: `Flottenname: ${elem['fleet_name']}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(ChartDonut, {\n              ariaDesc: \"Batteriestatus\",\n              ariaTitle: \"Batteriestatus\",\n              constrainToVisibleArea: true,\n              data: [{\n                x: '',\n                y: elem['battery_percent']\n              }, {\n                x: '',\n                y: 100 - elem['battery_percent']\n              }],\n              height: 90,\n              width: 190,\n              labels: ({\n                datum\n              }) => `${elem['battery_percent']}` //themeColor={ }\n              ,\n              title: Math.round(elem['battery_percent'], 2) + \"%\",\n              padding: {\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), \"Status: \", elem['mode'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 39\n            }, this), \"Location X: \", elem['location_x'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 49\n            }, this), \"Location Y: \", elem['location_y'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 49\n            }, this), \"Location Yaw: \", elem['location_yaw']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, cardData.indexOf(elem), false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Roboterstatus, \"1WLgG4kSnKC/5jxIFX2gbryNze8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Roboterstatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"Roboterstatus\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders/Roboterstatus.js"],"names":["React","useState","useEffect","makeStyles","Card","CardHeader","axios","ChartDonut","ChartThemeColor","CardContent","Avatar","IconButton","Typography","red","ClearIcon","Grid","AndroidIcon","useStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","Roboterstatus","allData","setAllData","cardData","setCardData","getRobotsStates","get","then","res","console","log","data","length","DataAreEqual","catch","err","message","newData","sort","join","flexGrow","padding","spacing","classes","map","elem","border","x","y","datum","Math","round","bottom","left","right","top","indexOf"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport axios from \"axios\";\nimport { ChartDonut, ChartThemeColor} from '@patternfly/react-charts';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Grid from \"@material-ui/core/Grid\";\nimport AndroidIcon from '@material-ui/icons/Android';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nexport default function Roboterstatus() {\n\nconst [allData, setAllData] = useState([]); \nconst [cardData, setCardData] = useState([])\n\nuseEffect(() => {getRobotsStates();});\n\nfunction getRobotsStates(){\n\n    axios.get('http://0.0.0.0:8080/robot_list')\n    .then(res => {\n    console.log(\"Robotstates:\", res.data); //Data from Gateway\n\n    if(res.data.length === 0) { //Check if data is available\n      //Karten auf null setzen\n      return;\n    }\n   \n    if(DataAreEqual(res.data)) return;\n    setAllData(res.data); //Set new table data\n    setCardData(res.data);\n\n    })\n    .catch(err => {\n        console.log(err.message); //Error-Handling\n    })\n}\n\n\n  //Check if old data = new data\n  function DataAreEqual(newData){\n\n    if(newData.sort().join(',') === allData.sort().join(',')){\n      return true;\n      }\n      else return false;\n    }\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    }\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\">\n\n        {cardData.map((elem) => (\n          <Grid item xs={3} key={cardData.indexOf(elem)}>\n            <Card style={{border:\"2px solid grey\"}}>  \n              <CardHeader\n              avatar={\n                <Avatar aria-label=\"recipe\" className={classes.avatar} style={{backgroundColor:\"green\"}}>\n                  <AndroidIcon/>\n                </Avatar>\n              }\n              /*action={\n                <IconButton aria-label=\"settings\">\n                  <ClearIcon />\n                </IconButton>\n              }*/\n                title={`Robotername: ${elem['robot_name']}`}\n                subheader={`Flottenname: ${elem['fleet_name']}`}\n              />\n\n              <CardContent>\n              <ChartDonut\n                ariaDesc=\"Batteriestatus\"\n                ariaTitle=\"Batteriestatus\"\n                constrainToVisibleArea={true}\n                data={[{ x: '', y: elem['battery_percent']}, {x: '', y: 100-elem['battery_percent'] }]}\n                height={90}\n                width={190}\n                labels={({ datum }) => `${elem['battery_percent']}`}\n                //themeColor={ }\n                title= {Math.round(elem['battery_percent'], 2) + \"%\"}\n                padding={{\n                bottom: 0,\n                left: 0,\n                right: 0, \n                top: 0\n                }}/>\n           \n               Status: {elem['mode']} <br></br>\n               Location X: {elem['location_x']} <br></br>\n               Location Y: {elem['location_y']} <br></br>\n               Location Yaw: {elem['location_yaw']}\n               \n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    \n  </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}