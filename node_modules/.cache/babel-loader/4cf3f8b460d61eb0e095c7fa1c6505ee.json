{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/KPI_Auslastung.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function KpiAuslastung() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [auslastungData, setAuslastungData] = useState([]);\n  const [auslastungNumber, setAuslastungNumber] = useState();\n  const [kpiColor, setKpiColor] = useState(ChartThemeColor.orange);\n  useEffect(() => {\n    getAuslastung();\n  }); //Get KPI\n\n  function getAuslastung() {\n    axios.get('http://localhost:8080/robot_list').then(res => {\n      console.log(\"Robot-List:\", res);\n\n      if (res.data.length === 0) {\n        //Check if data is availabl\n        setData(undefined);\n        setAuslastungData(undefined);\n        setAuslastungNumber(Number(0.00));\n        return;\n      }\n\n      DataAreEqual(res.data); //Check if old data = new data\n\n      setData(res.data);\n      calcKPI(res.data); //Calc kpi\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(newData) {\n    if (newData.sort().join(',') === data.sort().join(',')) {\n      return true;\n    } else return false;\n  } //Calculate Auslastungsdata\n\n\n  function calcKPI(data) {\n    var dataParsed = JSON.parse(data);\n    var wholeRobots = 0;\n    var RobotsInProgress = 0;\n    dataParsed.forEach(element => {\n      wholeRobots += 1;\n      var status = String(element['mode']);\n\n      if (status.startsWith('Moving') === true) {\n        RobotsInProgress + 1;\n      }\n    });\n    var auslastung = RobotsInProgress / wholeRobots * 100;\n    setAuslastungNumber(auslastung);\n    CalcKpiColor(auslastung); //Set dynamic color\n\n    setAuslastungData([{\n      x: '',\n      y: auslastung\n    }, {\n      x: '',\n      y: 100 - auslastung\n    }]); //Set new data    \n\n    return;\n  } //Set dynamic color \n\n\n  function CalcKpiColor(auslastung) {\n    console.log(\"Auslastung:\", auslastung);\n    if (auslastung < 80) setKpiColor(ChartThemeColor.orange);else if (auslastung >= 80 && auslastung <= 90) setKpiColor(ChartThemeColor.gold);else if (auslastung > 100) setKpiColor(ChartThemeColor.orange);else setKpiColor(ChartThemeColor.green);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '78px',\n      width: '90px',\n      padding: 0,\n      margin: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(ChartDonut, {\n      ariaDesc: \"Auslastung\",\n      ariaTitle: \"Auslastung\",\n      constrainToVisibleArea: true,\n      data: auslastungData,\n      height: 90,\n      labels: ({\n        datum\n      }) => `${datum.x} ${datum.y}%`,\n      themeColor: kpiColor,\n      title: Math.round(auslastungNumber, 2) + \"%\",\n      padding: {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0\n      },\n      width: 140\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(KpiAuslastung, \"BTAXrLYttxdBdk4RLmphvTdrHuI=\");\n\n_c = KpiAuslastung;\n\nvar _c;\n\n$RefreshReg$(_c, \"KpiAuslastung\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/KPI_Auslastung.js"],"names":["React","useState","useEffect","ChartDonut","ChartThemeColor","axios","KpiAuslastung","data","setData","auslastungData","setAuslastungData","auslastungNumber","setAuslastungNumber","kpiColor","setKpiColor","orange","getAuslastung","get","then","res","console","log","length","undefined","Number","DataAreEqual","calcKPI","catch","err","message","newData","sort","join","dataParsed","JSON","parse","wholeRobots","RobotsInProgress","forEach","element","status","String","startsWith","auslastung","CalcKpiColor","x","y","gold","green","height","width","padding","margin","datum","Math","round","bottom","left","right","top"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA2C,0BAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAExC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,EAAxD;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACG,eAAe,CAACW,MAAjB,CAAxC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AAAEc,IAAAA,aAAa;AAAK,GAA3B,CAAT,CAPwC,CASxC;;AACA,WAASA,aAAT,GACA;AACEX,IAAAA,KAAK,CAACY,GAAN,CAAU,kCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;;AACF,UAAGA,GAAG,CAACZ,IAAJ,CAASe,MAAT,KAAoB,CAAvB,EAA0B;AAAE;AAC1Bd,QAAAA,OAAO,CAACe,SAAD,CAAP;AACAb,QAAAA,iBAAiB,CAACa,SAAD,CAAjB;AACAX,QAAAA,mBAAmB,CAACY,MAAM,CAAC,IAAD,CAAP,CAAnB;AACA;AACD;;AAEDC,MAAAA,YAAY,CAACN,GAAG,CAACZ,IAAL,CAAZ,CATa,CASU;;AACvBC,MAAAA,OAAO,CAACW,GAAG,CAACZ,IAAL,CAAP;AAEAmB,MAAAA,OAAO,CAACP,GAAG,CAACZ,IAAL,CAAP,CAZa,CAYM;AAElB,KAfL,EAiBKoB,KAjBL,CAiBWC,GAAG,IAAI;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,OAAhB,EADU,CACgB;AAC7B,KAnBL;AAoBC,GAhCqC,CAkCpC;;;AACA,WAASJ,YAAT,CAAsBK,OAAtB,EAA8B;AAC1B,QAAGA,OAAO,CAACC,IAAR,GAAeC,IAAf,CAAoB,GAApB,MAA6BzB,IAAI,CAACwB,IAAL,GAAYC,IAAZ,CAAiB,GAAjB,CAAhC,EAAsD;AAClD,aAAO,IAAP;AACH,KAFD,MAGK,OAAO,KAAP;AACR,GAxCmC,CA0CpC;;;AACA,WAASN,OAAT,CAAiBnB,IAAjB,EAAsB;AAEtB,QAAI0B,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAW5B,IAAX,CAAjB;AAEA,QAAI6B,WAAW,GAAG,CAAlB;AACA,QAAIC,gBAAgB,GAAG,CAAvB;AAEAJ,IAAAA,UAAU,CAACK,OAAX,CAAmBC,OAAO,IAAI;AAC1BH,MAAAA,WAAW,IAAI,CAAf;AACA,UAAII,MAAM,GAAGC,MAAM,CAACF,OAAO,CAAC,MAAD,CAAR,CAAnB;;AACA,UAAGC,MAAM,CAACE,UAAP,CAAkB,QAAlB,MAAgC,IAAnC,EAAyC;AACrCL,QAAAA,gBAAgB,GAAE,CAAlB;AACH;AACJ,KAND;AAQA,QAAIM,UAAU,GAAIN,gBAAgB,GAAGD,WAApB,GAAmC,GAApD;AAEAxB,IAAAA,mBAAmB,CAAC+B,UAAD,CAAnB;AACAC,IAAAA,YAAY,CAACD,UAAD,CAAZ,CAlBsB,CAkBI;;AAC1BjC,IAAAA,iBAAiB,CAAC,CAAC;AAAEmC,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAEH;AAAZ,KAAD,EAA0B;AAACE,MAAAA,CAAC,EAAE,EAAJ;AAAQC,MAAAA,CAAC,EAAE,MAAIH;AAAf,KAA1B,CAAD,CAAjB,CAnBsB,CAmBqD;;AAC3E;AAED,GAjEqC,CAmEtC;;;AACA,WAASC,YAAT,CAAsBD,UAAtB,EAAiC;AAC/BvB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BsB,UAA3B;AACA,QAAIA,UAAU,GAAG,EAAjB,EAAqB7B,WAAW,CAACV,eAAe,CAACW,MAAjB,CAAX,CAArB,KACK,IAAI4B,UAAU,IAAI,EAAd,IAAoBA,UAAU,IAAI,EAAtC,EAA0C7B,WAAW,CAACV,eAAe,CAAC2C,IAAjB,CAAX,CAA1C,KACA,IAAIJ,UAAU,GAAG,GAAjB,EAAsB7B,WAAW,CAACV,eAAe,CAACW,MAAjB,CAAX,CAAtB,KACAD,WAAW,CAACV,eAAe,CAAC4C,KAAjB,CAAX;AACN;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,OAAO,EAAE,CAA1C;AAA6CC,MAAAA,MAAM,EAAE;AAArD,KAAZ;AAAA,2BAEE,QAAC,UAAD;AACE,MAAA,QAAQ,EAAC,YADX;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,sBAAsB,EAAE,IAH1B;AAIE,MAAA,IAAI,EAAE3C,cAJR;AAKE,MAAA,MAAM,EAAE,EALV;AAME,MAAA,MAAM,EAAE,CAAC;AAAE4C,QAAAA;AAAF,OAAD,KAAgB,GAAEA,KAAK,CAACR,CAAE,IAAGQ,KAAK,CAACP,CAAE,GAN/C;AAOE,MAAA,UAAU,EAAEjC,QAPd;AAQE,MAAA,KAAK,EAAGyC,IAAI,CAACC,KAAL,CAAW5C,gBAAX,EAA6B,CAA7B,IAAkC,GAR5C;AASE,MAAA,OAAO,EAAE;AACP6C,QAAAA,MAAM,EAAE,CADD;AAEPC,QAAAA,IAAI,EAAE,CAFC;AAGPC,QAAAA,KAAK,EAAE,CAHA;AAIPC,QAAAA,GAAG,EAAE;AAJE,OATX;AAeE,MAAA,KAAK,EAAE;AAfT;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAlGuBrD,a;;KAAAA,a","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { ChartDonut, ChartThemeColor} from '@patternfly/react-charts';\nimport axios from \"axios\";\n\nexport default function KpiAuslastung() {\n\nconst [data, setData] = useState([]);     \nconst [auslastungData, setAuslastungData] = useState([]); \nconst [auslastungNumber, setAuslastungNumber] = useState(); \nconst [kpiColor, setKpiColor] = useState(ChartThemeColor.orange);\n\nuseEffect(() => { getAuslastung(); });\n\n//Get KPI\nfunction getAuslastung()\n{ \n  axios.get('http://localhost:8080/robot_list')\n      .then(res => {\n        console.log(\"Robot-List:\", res)\n      if(res.data.length === 0) { //Check if data is availabl\n        setData(undefined)\n        setAuslastungData(undefined);\n        setAuslastungNumber(Number(0.00));\n        return;\n      }       \n      \n      DataAreEqual(res.data) //Check if old data = new data\n      setData(res.data)\n\n      calcKPI(res.data); //Calc kpi\n\n      })\n\n      .catch(err => {\n          console.log(err.message); //Error-Handling\n      })\n  } \n\n    //Check if old data = new data\n    function DataAreEqual(newData){\n        if(newData.sort().join(',') === data.sort().join(',')){\n            return true;\n        }\n        else return false;\n    }\n\n    //Calculate Auslastungsdata\n    function calcKPI(data){\n\n    var dataParsed = JSON.parse(data);\n\n    var wholeRobots = 0;\n    var RobotsInProgress = 0; \n\n    dataParsed.forEach(element => {\n        wholeRobots += 1; \n        var status = String(element['mode']);\n        if(status.startsWith('Moving') === true) {\n            RobotsInProgress +1;\n        }\n    });\n\n    var auslastung = (RobotsInProgress / wholeRobots) * 100;\n\n    setAuslastungNumber(auslastung);\n    CalcKpiColor(auslastung); //Set dynamic color\n    setAuslastungData([{ x: '', y: auslastung}, {x: '', y: 100-auslastung }]); //Set new data    \n    return;\n\n  }\n\n  //Set dynamic color \n  function CalcKpiColor(auslastung){\n    console.log(\"Auslastung:\", auslastung);\n    if (auslastung < 80) setKpiColor(ChartThemeColor.orange);\n    else if (auslastung >= 80 && auslastung <= 90) setKpiColor(ChartThemeColor.gold);\n    else if (auslastung > 100) setKpiColor(ChartThemeColor.orange);\n    else setKpiColor(ChartThemeColor.green);\n  }\n\n  return (\n    <div style={{ height: '78px', width: '90px', padding: 0, margin: 0}}>  \n     \n      <ChartDonut\n        ariaDesc=\"Auslastung\"\n        ariaTitle=\"Auslastung\"\n        constrainToVisibleArea={true}\n        data={auslastungData}\n        height={90}\n        labels={({ datum }) => `${datum.x} ${datum.y}%`}\n        themeColor={kpiColor}\n        title= {Math.round(auslastungNumber, 2) + \"%\"}\n        padding={{\n          bottom: 0,\n          left: 0,\n          right: 0, \n          top: 0\n        }}\n        width={140}/>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}