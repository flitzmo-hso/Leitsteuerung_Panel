{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/KPI_Auslastung.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function KpiAuslastung() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [auslastungData, setAuslastungData] = useState([]);\n  const [auslastungNumber, setAuslastungNumber] = useState();\n  const [kpiColor, setKpiColor] = useState(ChartThemeColor.orange);\n  useEffect(() => {\n    getAuslastung();\n  }); //Get KPI\n\n  function getAuslastung() {\n    axios.get('http://localhost:8080/robot_list').then(res => {\n      console.log(\"Robot-List:\", res);\n\n      if (res.data.length === 0) {\n        //Check if data is availabl\n        setData(0);\n        setAuslastungData(0);\n        setAuslastungNumber(Number(0.00));\n        return;\n      }\n\n      if (DataAreEqual(res.data)) return; //Check if old data = new data\n\n      setData(res.data);\n      calcKPI(res.data); //Calc kpi\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(newData) {\n    if (newData.sort().join(',') === data.sort().join(',')) {\n      return true;\n    } else return false;\n  } //Calculate Auslastungsdata\n\n\n  function calcKPI(data) {\n    var wholeRobots = 0;\n    var RobotsInProgress = 0;\n    data.forEach(element => {\n      wholeRobots += 1;\n      var status = String(element['mode']);\n\n      if (status.startsWith(\"Moving\")) {\n        RobotsInProgress += 1;\n      }\n    });\n\n    if (wholeRobots === 0 || RobotsInProgress === 0) {\n      setAuslastungNumber(0);\n      CalcKpiColor(0); //Set dynamic color\n\n      setAuslastungData([{\n        x: '',\n        y: 0\n      }, {\n        x: '',\n        y: 0\n      }]); //Set new data   \n    }\n\n    var auslastung = RobotsInProgress / wholeRobots * 100;\n    setAuslastungNumber(auslastung);\n    CalcKpiColor(auslastung); //Set dynamic color\n\n    setAuslastungData([{\n      x: '',\n      y: auslastung\n    }, {\n      x: '',\n      y: 100 - auslastung\n    }]); //Set new data    \n\n    return;\n  } //Set dynamic color \n\n\n  function CalcKpiColor(auslastung) {\n    console.log(\"Auslastung:\", auslastung);\n    if (auslastung < 80) setKpiColor(ChartThemeColor.orange);else if (auslastung >= 80 && auslastung <= 90) setKpiColor(ChartThemeColor.gold);else if (auslastung > 100) setKpiColor(ChartThemeColor.orange);else setKpiColor(ChartThemeColor.green);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '78px',\n      width: '90px',\n      padding: 0,\n      margin: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(ChartDonut, {\n      ariaDesc: \"Auslastung\",\n      ariaTitle: \"Auslastung\",\n      constrainToVisibleArea: true,\n      data: auslastungData,\n      height: 150,\n      labels: ({\n        datum\n      }) => `${datum.x} ${datum.y}%`,\n      themeColor: kpiColor,\n      title: Math.round(auslastungNumber, 2) + \"%\",\n      padding: {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 50\n      },\n      width: 140\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(KpiAuslastung, \"BTAXrLYttxdBdk4RLmphvTdrHuI=\");\n\n_c = KpiAuslastung;\n\nvar _c;\n\n$RefreshReg$(_c, \"KpiAuslastung\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/KPI_Auslastung.js"],"names":["React","useState","useEffect","ChartDonut","ChartThemeColor","axios","KpiAuslastung","data","setData","auslastungData","setAuslastungData","auslastungNumber","setAuslastungNumber","kpiColor","setKpiColor","orange","getAuslastung","get","then","res","console","log","length","Number","DataAreEqual","calcKPI","catch","err","message","newData","sort","join","wholeRobots","RobotsInProgress","forEach","element","status","String","startsWith","CalcKpiColor","x","y","auslastung","gold","green","height","width","padding","margin","datum","Math","round","bottom","left","right","top"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { ChartDonut, ChartThemeColor} from '@patternfly/react-charts';\nimport axios from \"axios\";\n\nexport default function KpiAuslastung() {\n\nconst [data, setData] = useState([]);     \nconst [auslastungData, setAuslastungData] = useState([]); \nconst [auslastungNumber, setAuslastungNumber] = useState(); \nconst [kpiColor, setKpiColor] = useState(ChartThemeColor.orange);\n\nuseEffect(() => { getAuslastung(); });\n\n//Get KPI\nfunction getAuslastung()\n{ \n  axios.get('http://localhost:8080/robot_list')\n      .then(res => {\n        console.log(\"Robot-List:\", res)\n      if(res.data.length === 0) { //Check if data is availabl\n        setData(0)\n        setAuslastungData(0);\n        setAuslastungNumber(Number(0.00));\n        return;\n      }       \n     \n      \n      if (DataAreEqual(res.data)) return;  //Check if old data = new data\n      setData(res.data);\n\n      calcKPI(res.data); //Calc kpi\n\n      })\n\n      .catch(err => {\n          console.log(err.message); //Error-Handling\n      })\n  } \n\n    //Check if old data = new data\n    function DataAreEqual(newData){\n        if(newData.sort().join(',') === data.sort().join(',')){\n            return true;\n        }\n        else return false;\n    }\n\n    //Calculate Auslastungsdata\n    function calcKPI(data){\n\n    var wholeRobots = 0;\n    var RobotsInProgress = 0; \n\n    data.forEach(element => {\n        wholeRobots += 1; \n        var status = String(element['mode']);\n        if(status.startsWith(\"Moving\")) {\n            RobotsInProgress += 1;\n        }\n    });\n\n    if(wholeRobots === 0 || RobotsInProgress === 0) \n    {\n        setAuslastungNumber(0);\n        CalcKpiColor(0); //Set dynamic color\n        setAuslastungData([{ x: '', y: 0}, {x: '', y: 0}]); //Set new data   \n    }\n\n    var auslastung = (RobotsInProgress / wholeRobots) * 100;\n\n    setAuslastungNumber(auslastung);\n    CalcKpiColor(auslastung); //Set dynamic color\n    setAuslastungData([{ x: '', y: auslastung}, {x: '', y: 100-auslastung }]); //Set new data    \n    return;\n\n  }\n\n  //Set dynamic color \n  function CalcKpiColor(auslastung){\n    console.log(\"Auslastung:\", auslastung);\n    if (auslastung < 80) setKpiColor(ChartThemeColor.orange);\n    else if (auslastung >= 80 && auslastung <= 90) setKpiColor(ChartThemeColor.gold);\n    else if (auslastung > 100) setKpiColor(ChartThemeColor.orange);\n    else setKpiColor(ChartThemeColor.green);\n  }\n\n  return (\n    <div style={{ height: '78px', width: '90px', padding: 0, margin: 0}}>  \n     \n      <ChartDonut\n        ariaDesc=\"Auslastung\"\n        ariaTitle=\"Auslastung\"\n        constrainToVisibleArea={true}\n        data={auslastungData}\n        height={150}\n        labels={({ datum }) => `${datum.x} ${datum.y}%`}\n        themeColor={kpiColor}\n        title= {Math.round(auslastungNumber, 2) + \"%\"}\n        padding={{\n          bottom: 0,\n          left: 0,\n          right: 0, \n          top: 50\n        }}\n        width={140}/>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}