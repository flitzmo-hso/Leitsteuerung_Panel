{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/KPI_Auslastung.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Auslastung() {\n  _s();\n\n  const [auslastungData, setAuslastungData] = useState([]);\n  const [auslastungNumber, setAuslastungNumber] = useState();\n  const [kpiColor, setKpiColor] = useState(ChartThemeColor.orange);\n  useEffect(() => {\n    getAuslastung();\n  }); //Get KPI\n\n  function getAuslastung() {\n    axios.get('http://localhost:8080/robot_list').then(res => {\n      console.log(\"Robot-List:\", res);\n\n      if (res.data.length === 0) {\n        //Check if data is available\n        setAuslastungData(undefined);\n        setAuslastungNumber(Number(0.00));\n        return;\n      }\n\n      var resp = JSON.parse(res.data[0]['auslastung']);\n      if (auslastungNumber === resp) return; //Check if data has changed\n\n      console.log(typeof resp);\n      if (typeof resp !== 'number') return;\n      setAuslastungNumber(resp);\n      CalcKpiColor(resp); //Set dynamic color\n\n      setAuslastungData([{\n        x: '',\n        y: resp\n      }, {\n        x: '',\n        y: 100 - resp\n      }]); //Set new data     \n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Set dynamic color \n\n\n  function CalcKpiColor(resp) {\n    console.log(\"Auslastung:\", resp);\n    if (resp < 80) setKpiColor(ChartThemeColor.orange);else if (resp >= 80 && resp <= 90) setKpiColor(ChartThemeColor.gold);else if (resp > 100) setKpiColor(ChartThemeColor.orange);else setKpiColor(ChartThemeColor.green);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '78px',\n      width: '90px',\n      padding: 0,\n      margin: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(ChartDonut, {\n      ariaDesc: \"Auslastung\",\n      ariaTitle: \"Auslastung\",\n      constrainToVisibleArea: true,\n      data: auslastungData,\n      height: 90,\n      labels: ({\n        datum\n      }) => `${datum.x} ${datum.y}%`,\n      themeColor: kpiColor,\n      title: Math.round(auslastungNumber, 2) + \"%\",\n      padding: {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0\n      },\n      width: 140\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Auslastung, \"hdxAYcoOYcEjoq1K55Kn6zsVIPs=\");\n\n_c = Auslastung;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auslastung\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Dashboard/KPI_Auslastung.js"],"names":["React","useState","useEffect","ChartDonut","ChartThemeColor","axios","Auslastung","auslastungData","setAuslastungData","auslastungNumber","setAuslastungNumber","kpiColor","setKpiColor","orange","getAuslastung","get","then","res","console","log","data","length","undefined","Number","resp","JSON","parse","CalcKpiColor","x","y","catch","err","message","gold","green","height","width","padding","margin","datum","Math","round","bottom","left","right","top"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA2C,0BAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AAErC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACQ,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,EAAxD;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACG,eAAe,CAACS,MAAjB,CAAxC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AAAEY,IAAAA,aAAa;AAAK,GAA3B,CAAT,CANqC,CAQrC;;AACA,WAASA,aAAT,GACA;AACET,IAAAA,KAAK,CAACU,GAAN,CAAU,kCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;;AACF,UAAGA,GAAG,CAACG,IAAJ,CAASC,MAAT,KAAoB,CAAvB,EAA0B;AAAE;AAC1Bb,QAAAA,iBAAiB,CAACc,SAAD,CAAjB;AACAZ,QAAAA,mBAAmB,CAACa,MAAM,CAAC,IAAD,CAAP,CAAnB;AACA;AACD;;AAED,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWT,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAY,YAAZ,CAAX,CAAX;AACA,UAAIX,gBAAgB,KAAKe,IAAzB,EAA+B,OATlB,CAS2B;;AACxCN,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAOK,IAAnB;AACA,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC9Bd,MAAAA,mBAAmB,CAACc,IAAD,CAAnB;AACAG,MAAAA,YAAY,CAACH,IAAD,CAAZ,CAba,CAaO;;AACpBhB,MAAAA,iBAAiB,CAAC,CAAC;AAAEoB,QAAAA,CAAC,EAAE,EAAL;AAASC,QAAAA,CAAC,EAAEL;AAAZ,OAAD,EAAoB;AAACI,QAAAA,CAAC,EAAE,EAAJ;AAAQC,QAAAA,CAAC,EAAE,MAAIL;AAAf,OAApB,CAAD,CAAjB,CAda,CAckD;AAE9D,KAjBL,EAkBKM,KAlBL,CAkBWC,GAAG,IAAI;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAG,CAACC,OAAhB,EADU,CACgB;AAC7B,KApBL;AAqBC,GAhCkC,CAkCnC;;;AACA,WAASL,YAAT,CAAsBH,IAAtB,EAA2B;AACzBN,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BK,IAA3B;AACA,QAAIA,IAAI,GAAG,EAAX,EAAeZ,WAAW,CAACR,eAAe,CAACS,MAAjB,CAAX,CAAf,KACK,IAAIW,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8BZ,WAAW,CAACR,eAAe,CAAC6B,IAAjB,CAAX,CAA9B,KACA,IAAIT,IAAI,GAAG,GAAX,EAAgBZ,WAAW,CAACR,eAAe,CAACS,MAAjB,CAAX,CAAhB,KACAD,WAAW,CAACR,eAAe,CAAC8B,KAAjB,CAAX;AACN;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,OAAO,EAAE,CAA1C;AAA6CC,MAAAA,MAAM,EAAE;AAArD,KAAZ;AAAA,2BAEE,QAAC,UAAD;AACE,MAAA,QAAQ,EAAC,YADX;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,sBAAsB,EAAE,IAH1B;AAIE,MAAA,IAAI,EAAE/B,cAJR;AAKE,MAAA,MAAM,EAAE,EALV;AAME,MAAA,MAAM,EAAE,CAAC;AAAEgC,QAAAA;AAAF,OAAD,KAAgB,GAAEA,KAAK,CAACX,CAAE,IAAGW,KAAK,CAACV,CAAE,GAN/C;AAOE,MAAA,UAAU,EAAElB,QAPd;AAQE,MAAA,KAAK,EAAG6B,IAAI,CAACC,KAAL,CAAWhC,gBAAX,EAA6B,CAA7B,IAAkC,GAR5C;AASE,MAAA,OAAO,EAAE;AACPiC,QAAAA,MAAM,EAAE,CADD;AAEPC,QAAAA,IAAI,EAAE,CAFC;AAGPC,QAAAA,KAAK,EAAE,CAHA;AAIPC,QAAAA,GAAG,EAAE;AAJE,OATX;AAeE,MAAA,KAAK,EAAE;AAfT;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAjEuBvC,U;;KAAAA,U","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { ChartDonut, ChartThemeColor} from '@patternfly/react-charts';\nimport axios from \"axios\";\n\nexport default function Auslastung() {\n\nconst [auslastungData, setAuslastungData] = useState([]); \nconst [auslastungNumber, setAuslastungNumber] = useState(); \nconst [kpiColor, setKpiColor] = useState(ChartThemeColor.orange);\n\nuseEffect(() => { getAuslastung(); });\n\n//Get KPI\nfunction getAuslastung()\n{ \n  axios.get('http://localhost:8080/robot_list')\n      .then(res => {\n        console.log(\"Robot-List:\", res)\n      if(res.data.length === 0) { //Check if data is available\n        setAuslastungData(undefined);\n        setAuslastungNumber(Number(0.00));\n        return;\n      }       \n\n      var resp = JSON.parse(res.data[0]['auslastung']);\n      if (auslastungNumber === resp) return;  //Check if data has changed\n      console.log(typeof resp);\n      if (typeof resp !== 'number') return;\n      setAuslastungNumber(resp);\n      CalcKpiColor(resp); //Set dynamic color\n      setAuslastungData([{ x: '', y: resp}, {x: '', y: 100-resp }]); //Set new data     \n\n      })\n      .catch(err => {\n          console.log(err.message); //Error-Handling\n      })\n  } \n\n  //Set dynamic color \n  function CalcKpiColor(resp){\n    console.log(\"Auslastung:\", resp);\n    if (resp < 80) setKpiColor(ChartThemeColor.orange);\n    else if (resp >= 80 && resp <= 90) setKpiColor(ChartThemeColor.gold);\n    else if (resp > 100) setKpiColor(ChartThemeColor.orange);\n    else setKpiColor(ChartThemeColor.green);\n  }\n\n  return (\n    <div style={{ height: '78px', width: '90px', padding: 0, margin: 0}}>  \n     \n      <ChartDonut\n        ariaDesc=\"Auslastung\"\n        ariaTitle=\"Auslastung\"\n        constrainToVisibleArea={true}\n        data={auslastungData}\n        height={90}\n        labels={({ datum }) => `${datum.x} ${datum.y}%`}\n        themeColor={kpiColor}\n        title= {Math.round(auslastungNumber, 2) + \"%\"}\n        padding={{\n          bottom: 0,\n          left: 0,\n          right: 0, \n          top: 0\n        }}\n        width={140}/>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}