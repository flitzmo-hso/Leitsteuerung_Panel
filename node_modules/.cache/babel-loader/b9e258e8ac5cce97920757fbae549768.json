{"ast":null,"code":"var _jsxFileName = \"/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders/Auftragsstatus.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport axios from \"axios\";\nimport { ChartDonut } from '@patternfly/react-charts';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Grid from \"@material-ui/core/Grid\";\nimport AndroidIcon from '@material-ui/icons/Android';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Auftragsstatus() {\n  _s();\n\n  const [allData, setAllData] = useState([]);\n  const [cardData, setCardData] = useState([]);\n  useEffect(() => {\n    getTaskStates();\n  });\n\n  function getTaskStates() {\n    axios.get('http://0.0.0.0:8080/task_list').then(res => {\n      console.log(\"Taskstatus:\", res.data); //Data from Gateway\n\n      if (res.data.length === 0) {\n        //Check if data is available\n        //Karten auf null setzen\n        return;\n      }\n\n      if (DataAreEqual(res.data)) return;\n      setAllData(res.data); //Set new table data\n\n      setCardData(res.data);\n    }).catch(err => {\n      console.log(err.message); //Error-Handling\n    });\n  } //Check if old data = new data\n\n\n  function DataAreEqual(newData) {\n    if (newData.sort().join(',') === allData.sort().join(',')) {\n      return true;\n    } else return false;\n  }\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      children: cardData.map(elem => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            border: \"2px solid grey\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              \"aria-label\": \"recipe\",\n              className: classes.avatar,\n              style: {\n                backgroundColor: \"green\"\n              },\n              children: /*#__PURE__*/_jsxDEV(AndroidIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this),\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"settings\",\n              children: /*#__PURE__*/_jsxDEV(ClearIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this),\n            title: `Task-ID: ${elem['task_id']}`,\n            subheader: `Typ: ${elem['task_type']}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), elem['progress'], String(elem['progress']).substring(0, String(elem['progress']) - 2), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(ChartDonut, {\n              ariaDesc: \"Batteriestatus\",\n              ariaTitle: \"Batteriestatus\",\n              constrainToVisibleArea: true,\n              data: [{\n                x: '',\n                y: parseInt(elem['progress'][-1])\n              }, {\n                x: '',\n                y: 100 - parseInt(elem['progress'][-1])\n              }],\n              height: 90,\n              width: 190,\n              labels: ({\n                datum\n              }) => `${elem['progress']}` //themeColor={ }\n              ,\n              title: elem['progress'],\n              padding: {\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), \"Status: \", elem['state'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 40\n            }, this), \"Erledigt: \", elem['done'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 41\n            }, this), \"Robotername: \", elem['robot_name'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 50\n            }, this), \"Flottename: \", elem['fleet_name'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 49\n            }, this), \"Priorit\\xE4t: \", elem['priority'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 46\n            }, this), \"\\xDCbermittelte Startzeit: \", elem['submited_start_time'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 70\n            }, this), \"Wirkliche Startzeit: \", elem['start_time'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 58\n            }, this), \"Endzeit: \", elem['startend_time_time'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 54\n            }, this), \"Beschreibung: \", elem['description'], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, cardData.indexOf(elem), false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Auftragsstatus, \"1WLgG4kSnKC/5jxIFX2gbryNze8=\", true);\n\n_c = Auftragsstatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auftragsstatus\");","map":{"version":3,"sources":["/home/flitzmofinal/GitHub/Leitsteuerung_Panel/src/components/Orders/Auftragsstatus.js"],"names":["React","useState","useEffect","makeStyles","Card","CardHeader","axios","ChartDonut","CardContent","Avatar","IconButton","ClearIcon","Grid","AndroidIcon","Auftragsstatus","allData","setAllData","cardData","setCardData","getTaskStates","get","then","res","console","log","data","length","DataAreEqual","catch","err","message","newData","sort","join","useStyles","theme","root","flexGrow","padding","spacing","classes","map","elem","border","avatar","backgroundColor","String","substring","x","y","parseInt","datum","bottom","left","right","top","indexOf"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAIA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AAEzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAACiB,IAAAA,aAAa;AAAI,GAAzB,CAAT;;AAEA,WAASA,aAAT,GAAwB;AAEpBb,IAAAA,KAAK,CAACc,GAAN,CAAU,+BAAV,EACCC,IADD,CACMC,GAAG,IAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAAG,CAACG,IAA/B,EADa,CACyB;;AAEtC,UAAGH,GAAG,CAACG,IAAJ,CAASC,MAAT,KAAoB,CAAvB,EAA0B;AAAE;AAC1B;AACA;AACD;;AAED,UAAGC,YAAY,CAACL,GAAG,CAACG,IAAL,CAAf,EAA2B;AAC3BT,MAAAA,UAAU,CAACM,GAAG,CAACG,IAAL,CAAV,CATa,CASS;;AACtBP,MAAAA,WAAW,CAACI,GAAG,CAACG,IAAL,CAAX;AAEC,KAbD,EAcCG,KAdD,CAcOC,GAAG,IAAI;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACC,OAAhB,EADU,CACgB;AAC7B,KAhBD;AAiBH,GA1BwC,CA6BvC;;;AACA,WAASH,YAAT,CAAsBI,OAAtB,EAA8B;AAE5B,QAAGA,OAAO,CAACC,IAAR,GAAeC,IAAf,CAAoB,GAApB,MAA6BlB,OAAO,CAACiB,IAAR,GAAeC,IAAf,CAAoB,GAApB,CAAhC,EAAyD;AACvD,aAAO,IAAP;AACC,KAFH,MAGO,OAAO,KAAP;AACN;;AAEL,QAAMC,SAAS,GAAG/B,UAAU,CAAEgC,KAAD,KAAY;AACrCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,CADN;AAEJC,MAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AAFL;AAD+B,GAAZ,CAAD,CAA5B;AAOE,QAAMC,OAAO,GAAGN,SAAS,EAAzB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEM,OAAO,CAACJ,IAAxB;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,SAAS,EAAC,KAHZ;AAIE,MAAA,OAAO,EAAC,YAJV;AAKE,MAAA,UAAU,EAAC,YALb;AAAA,gBAOGnB,QAAQ,CAACwB,GAAT,CAAcC,IAAD,iBACZ,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,MAAM,EAAC;AAAR,WAAb;AAAA,kCACE,QAAC,UAAD;AACA,YAAA,MAAM,eACJ,QAAC,MAAD;AAAQ,4BAAW,QAAnB;AAA4B,cAAA,SAAS,EAAEH,OAAO,CAACI,MAA/C;AAAuD,cAAA,KAAK,EAAE;AAACC,gBAAAA,eAAe,EAAC;AAAjB,eAA9D;AAAA,qCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFF;AAMA,YAAA,MAAM,eACJ,QAAC,UAAD;AAAY,4BAAW,UAAvB;AAAA,qCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAPF;AAWE,YAAA,KAAK,EAAG,YAAWH,IAAI,CAAC,SAAD,CAAY,EAXrC;AAYE,YAAA,SAAS,EAAG,QAAOA,IAAI,CAAC,WAAD,CAAc;AAZvC;AAAA;AAAA;AAAA;AAAA,kBADF,EAgBKA,IAAI,CAAC,UAAD,CAhBT,EAiBKI,MAAM,CAACJ,IAAI,CAAC,UAAD,CAAL,CAAN,CAAyBK,SAAzB,CAAmC,CAAnC,EAAsCD,MAAM,CAACJ,IAAI,CAAC,UAAD,CAAL,CAAN,GAA0B,CAAhE,CAjBL,eAmBE,QAAC,WAAD;AAAA,oCACA,QAAC,UAAD;AACE,cAAA,QAAQ,EAAC,gBADX;AAEE,cAAA,SAAS,EAAC,gBAFZ;AAGE,cAAA,sBAAsB,EAAE,IAH1B;AAIE,cAAA,IAAI,EAAE,CAAC;AAAEM,gBAAAA,CAAC,EAAE,EAAL;AAASC,gBAAAA,CAAC,EAAEC,QAAQ,CAACR,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAC,CAAlB,CAAD;AAApB,eAAD,EAA8C;AAACM,gBAAAA,CAAC,EAAE,EAAJ;AAAQC,gBAAAA,CAAC,EAAE,MAAIC,QAAQ,CAACR,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAC,CAAlB,CAAD;AAAvB,eAA9C,CAJR;AAKE,cAAA,MAAM,EAAE,EALV;AAME,cAAA,KAAK,EAAE,GANT;AAOE,cAAA,MAAM,EAAE,CAAC;AAAES,gBAAAA;AAAF,eAAD,KAAgB,GAAET,IAAI,CAAC,UAAD,CAAa,EAP7C,CAQE;AARF;AASE,cAAA,KAAK,EAAGA,IAAI,CAAC,UAAD,CATd;AAUE,cAAA,OAAO,EAAE;AACTU,gBAAAA,MAAM,EAAE,CADC;AAETC,gBAAAA,IAAI,EAAE,CAFG;AAGTC,gBAAAA,KAAK,EAAE,CAHE;AAITC,gBAAAA,GAAG,EAAE;AAJI;AAVX;AAAA;AAAA;AAAA;AAAA,oBADA,cAkBUb,IAAI,CAAC,OAAD,CAlBd,oBAkByB;AAAA;AAAA;AAAA;AAAA,oBAlBzB,gBAmBYA,IAAI,CAAC,MAAD,CAnBhB,oBAmB0B;AAAA;AAAA;AAAA;AAAA,oBAnB1B,mBAoBeA,IAAI,CAAC,YAAD,CApBnB,oBAoBmC;AAAA;AAAA;AAAA;AAAA,oBApBnC,kBAqBcA,IAAI,CAAC,YAAD,CArBlB,oBAqBkC;AAAA;AAAA;AAAA;AAAA,oBArBlC,oBAsBaA,IAAI,CAAC,UAAD,CAtBjB,oBAsB+B;AAAA;AAAA;AAAA;AAAA,oBAtB/B,iCAuB0BA,IAAI,CAAC,qBAAD,CAvB9B,oBAuBuD;AAAA;AAAA;AAAA;AAAA,oBAvBvD,2BAwBuBA,IAAI,CAAC,YAAD,CAxB3B,oBAwB2C;AAAA;AAAA;AAAA;AAAA,oBAxB3C,eAyBWA,IAAI,CAAC,oBAAD,CAzBf,oBAyBuC;AAAA;AAAA;AAAA;AAAA,oBAzBvC,oBA0BgBA,IAAI,CAAC,aAAD,CA1BpB,oBA0BqC;AAAA;AAAA;AAAA;AAAA,oBA1BrC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAAuBzB,QAAQ,CAACuC,OAAT,CAAiBd,IAAjB,CAAvB;AAAA;AAAA;AAAA;AAAA,cADD;AAPH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkED;;GAjHuB5B,c;;KAAAA,c","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport axios from \"axios\";\nimport { ChartDonut } from '@patternfly/react-charts';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Grid from \"@material-ui/core/Grid\";\nimport AndroidIcon from '@material-ui/icons/Android';\n\n\n\nexport default function Auftragsstatus() {\n\nconst [allData, setAllData] = useState([]); \nconst [cardData, setCardData] = useState([])\n\nuseEffect(() => {getTaskStates();});\n\nfunction getTaskStates(){\n\n    axios.get('http://0.0.0.0:8080/task_list')\n    .then(res => {\n    console.log(\"Taskstatus:\", res.data); //Data from Gateway\n\n    if(res.data.length === 0) { //Check if data is available\n      //Karten auf null setzen\n      return;\n    }\n   \n    if(DataAreEqual(res.data)) return;\n    setAllData(res.data); //Set new table data\n    setCardData(res.data);\n\n    })\n    .catch(err => {\n        console.log(err.message); //Error-Handling\n    })\n}\n\n\n  //Check if old data = new data\n  function DataAreEqual(newData){\n\n    if(newData.sort().join(',') === allData.sort().join(',')){\n      return true;\n      }\n      else return false;\n    }\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    }\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\">\n\n        {cardData.map((elem) => (\n          <Grid item xs={3} key={cardData.indexOf(elem)}>\n            <Card style={{border:\"2px solid grey\"}}>  \n              <CardHeader\n              avatar={\n                <Avatar aria-label=\"recipe\" className={classes.avatar} style={{backgroundColor:\"green\"}}>\n                  <AndroidIcon/>\n                </Avatar>\n              }\n              action={\n                <IconButton aria-label=\"settings\">\n                  <ClearIcon />\n                </IconButton>\n              }\n                title={`Task-ID: ${elem['task_id']}`}\n                subheader={`Typ: ${elem['task_type']}`}\n              />\n\n                {elem['progress']}\n                {String(elem['progress']).substring(0, String(elem['progress']) -2)}\n\n              <CardContent>\n              <ChartDonut\n                ariaDesc=\"Batteriestatus\"\n                ariaTitle=\"Batteriestatus\"\n                constrainToVisibleArea={true}\n                data={[{ x: '', y: parseInt(elem['progress'][-1])}, {x: '', y: 100-parseInt(elem['progress'][-1]) }]}\n                height={90}\n                width={190}\n                labels={({ datum }) => `${elem['progress']}`}\n                //themeColor={ }\n                title= {elem['progress']}\n                padding={{\n                bottom: 0,\n                left: 0,\n                right: 0, \n                top: 0\n                }}/>\n  \n               Status: {elem['state']} <br></br>\n               Erledigt: {elem['done']} <br></br>\n               Robotername: {elem['robot_name']} <br></br>\n               Flottename: {elem['fleet_name']} <br></br>\n               Priorität: {elem['priority']} <br></br>\n               Übermittelte Startzeit: {elem['submited_start_time']} <br></br>\n               Wirkliche Startzeit: {elem['start_time']} <br></br>\n               Endzeit: {elem['startend_time_time']} <br></br>    \n               Beschreibung: {elem['description']} <br></br>\n                  \n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    \n  </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}